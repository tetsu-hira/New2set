{"ast":null,"code":"const initialState = {\n  teamList: []\n};\nconst path = window.location.pathname;\n\nconst addTeam = (array, team, param) => {\n  console.log(param);\n  console.log(array.filter(item => item.param === param));\n  return Array.from(new Set([...array, param, { ...array.param,\n    users: team,\n    point: 0,\n    score: 0,\n    times: 0,\n    ratio: 0,\n    count: 0,\n    param: window.location.pathname\n  }]));\n}; //重複データが入らないようにするための対応\n\n\nconst removeTeam = (array, team) => {\n  return array.filter((v, i) => v !== team);\n};\n\nconst entryTeam = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_Team':\n      return { ...state,\n        teamList: addTeam(state.teamList, action.payload, window.location.pathname)\n      };\n\n    case 'REMOVE_Team':\n      return { ...state,\n        teamList: removeTeam(state.teamList, action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default entryTeam;","map":{"version":3,"sources":["C:/Users/AIQ11/Documents/Web/New2set/src/reducers/team.ts"],"names":["initialState","teamList","path","window","location","pathname","addTeam","array","team","param","console","log","filter","item","Array","from","Set","users","point","score","times","ratio","count","removeTeam","v","i","entryTeam","state","action","type","payload"],"mappings":"AAKA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;AAGA,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAA7B;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAaC,IAAb,EAAwBC,KAAxB,KAAuC;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,MAAN,CAAcC,IAAD,IAAeA,IAAI,CAACJ,KAAL,KAAeA,KAA3C,CAAZ;AACA,SAAOK,KAAK,CAACC,IAAN,CACL,IAAIC,GAAJ,CAAQ,CACN,GAAGT,KADG,EAENE,KAFM,EAGN,EACE,GAAGF,KAAK,CAACE,KADX;AAEEQ,IAAAA,KAAK,EAAET,IAFT;AAGEU,IAAAA,KAAK,EAAE,CAHT;AAIEC,IAAAA,KAAK,EAAE,CAJT;AAKEC,IAAAA,KAAK,EAAE,CALT;AAMEC,IAAAA,KAAK,EAAE,CANT;AAOEC,IAAAA,KAAK,EAAE,CAPT;AAQEb,IAAAA,KAAK,EAAEN,MAAM,CAACC,QAAP,CAAgBC;AARzB,GAHM,CAAR,CADK,CAAP;AAgBD,CAnBD,C,CAmBG;;;AAEH,MAAMkB,UAAU,GAAG,CAAChB,KAAD,EAAaC,IAAb,KAA2B;AAC5C,SAAOD,KAAK,CAACK,MAAN,CAAa,CAACY,CAAD,EAASC,CAAT,KAAoBD,CAAC,KAAKhB,IAAvC,CAAP;AACD,CAFD;;AAIA,MAAMkB,SAAS,GAAG,CAACC,KAAU,GAAG3B,YAAd,EAA4B4B,MAA5B,KAAiD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EACL,GAAGF,KADE;AAEL1B,QAAAA,QAAQ,EAAEK,OAAO,CAACqB,KAAK,CAAC1B,QAAP,EAAiB2B,MAAM,CAACE,OAAxB,EAAiC3B,MAAM,CAACC,QAAP,CAAgBC,QAAjD;AAFZ,OAAP;;AAIF,SAAK,aAAL;AACE,aAAO,EACL,GAAGsB,KADE;AAEL1B,QAAAA,QAAQ,EAAEsB,UAAU,CAACI,KAAK,CAAC1B,QAAP,EAAiB2B,MAAM,CAACE,OAAxB;AAFf,OAAP;;AAIF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,SAAf","sourcesContent":["type Act = {\r\n  type: string;\r\n  payload: string;\r\n};\r\n\r\nconst initialState = {\r\n  teamList: [],\r\n};\r\nconst path = window.location.pathname;\r\n\r\nconst addTeam = (array: any, team: any, param: any) => {\r\n  console.log(param);\r\n  console.log(array.filter((item: any) => item.param === param));\r\n  return Array.from(\r\n    new Set([\r\n      ...array,\r\n      param,\r\n      {\r\n        ...array.param,\r\n        users: team,\r\n        point: 0,\r\n        score: 0,\r\n        times: 0,\r\n        ratio: 0,\r\n        count: 0,\r\n        param: window.location.pathname,\r\n      },\r\n    ]),\r\n  );\r\n}; //重複データが入らないようにするための対応\r\n\r\nconst removeTeam = (array: any, team: any) => {\r\n  return array.filter((v: any, i: any) => v !== team);\r\n};\r\n\r\nconst entryTeam = (state: any = initialState, action: Act): any => {\r\n  switch (action.type) {\r\n    case 'ADD_Team':\r\n      return {\r\n        ...state,\r\n        teamList: addTeam(state.teamList, action.payload, window.location.pathname),\r\n      };\r\n    case 'REMOVE_Team':\r\n      return {\r\n        ...state,\r\n        teamList: removeTeam(state.teamList, action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default entryTeam;\r\n"]},"metadata":{},"sourceType":"module"}