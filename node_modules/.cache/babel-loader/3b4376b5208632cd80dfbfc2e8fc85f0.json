{"ast":null,"code":"const initialState = {\n  teamList: []\n};\n\nconst addItem = (array, item) => {\n  return Array.from(new Set([...array, item]));\n}; //重複データが入らないようにするための対応\n\n\nconst removeItem = (array, item) => {\n  return array.filter((v, i) => v !== item);\n};\n\nconst entryItem = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      return { ...state,\n        teamList: addItem(state.teamList, action.payload)\n      };\n\n    case 'REMOVE_ITEM':\n      return { ...state,\n        teamList: removeItem(state.teamList, action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default entryItem;","map":{"version":3,"sources":["C:/Users/AIQ11/Documents/Web/New2set/src/reducers/entryTeam.ts"],"names":["initialState","teamList","addItem","array","item","Array","from","Set","removeItem","filter","v","i","entryItem","state","action","type","payload"],"mappings":"AAKA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAaC,IAAb,KAA2B;AACzC,SAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CAAC,GAAGJ,KAAJ,EAAWC,IAAX,CAAR,CAAX,CAAP;AACD,CAFD,C,CAEG;;;AAEH,MAAMI,UAAU,GAAG,CAACL,KAAD,EAAaC,IAAb,KAA2B;AAC5C,SAAOD,KAAK,CAACM,MAAN,CAAa,CAACC,CAAD,EAASC,CAAT,KAAoBD,CAAC,KAAKN,IAAvC,CAAP;AACD,CAFD;;AAIA,MAAMQ,SAAS,GAAG,CAACC,KAAU,GAAGb,YAAd,EAA4Bc,MAA5B,KAAiD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELZ,QAAAA,QAAQ,EAAEC,OAAO,CAACW,KAAK,CAACZ,QAAP,EAAiBa,MAAM,CAACE,OAAxB;AAFZ,OAAP;;AAIF,SAAK,aAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELZ,QAAAA,QAAQ,EAAEO,UAAU,CAACK,KAAK,CAACZ,QAAP,EAAiBa,MAAM,CAACE,OAAxB;AAFf,OAAP;;AAIF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,SAAf","sourcesContent":["type Act = {\r\n  type: string;\r\n  payload: string;\r\n};\r\n\r\nconst initialState = {\r\n  teamList: [],\r\n};\r\n\r\nconst addItem = (array: any, item: any) => {\r\n  return Array.from(new Set([...array, item]));\r\n}; //重複データが入らないようにするための対応\r\n\r\nconst removeItem = (array: any, item: any) => {\r\n  return array.filter((v: any, i: any) => v !== item);\r\n};\r\n\r\nconst entryItem = (state: any = initialState, action: Act): any => {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      return {\r\n        ...state,\r\n        teamList: addItem(state.teamList, action.payload),\r\n      };\r\n    case 'REMOVE_ITEM':\r\n      return {\r\n        ...state,\r\n        teamList: removeItem(state.teamList, action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default entryItem;\r\n"]},"metadata":{},"sourceType":"module"}