{"ast":null,"code":"const initialState = {\n  teamList: [{\n    state: '',\n    point: 0,\n    score: 0,\n    times: 0,\n    ratio: 0,\n    count: 0\n  }]\n};\n\nconst addTeam = (array, team) => {\n  return Array.from(new Set([...array, team]));\n}; //重複データが入らないようにするための対応\n\n\nconst removeTeam = (array, team) => {\n  return array.filter((v, i) => v !== team);\n};\n\nconst entryTeam = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_Team':\n      return { ...state,\n        teamList: addTeam(state.teamList, action.payload)\n      };\n\n    case 'REMOVE_Team':\n      return { ...state,\n        teamList: removeTeam(state.teamList, action.payload)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default entryTeam;","map":{"version":3,"sources":["C:/Users/AIQ11/Documents/Web/New2set/src/reducers/team.ts"],"names":["initialState","teamList","state","point","score","times","ratio","count","addTeam","array","team","Array","from","Set","removeTeam","filter","v","i","entryTeam","action","type","payload"],"mappings":"AAKA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,EADT;AAEEC,IAAAA,KAAK,EAAE,CAFT;AAGEC,IAAAA,KAAK,EAAE,CAHT;AAIEC,IAAAA,KAAK,EAAE,CAJT;AAKEC,IAAAA,KAAK,EAAE,CALT;AAMEC,IAAAA,KAAK,EAAE;AANT,GADQ;AADS,CAArB;;AAaA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAaC,IAAb,KAA2B;AACzC,SAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CAAC,GAAGJ,KAAJ,EAAWC,IAAX,CAAR,CAAX,CAAP;AACD,CAFD,C,CAEG;;;AAEH,MAAMI,UAAU,GAAG,CAACL,KAAD,EAAaC,IAAb,KAA2B;AAC5C,SAAOD,KAAK,CAACM,MAAN,CAAa,CAACC,CAAD,EAASC,CAAT,KAAoBD,CAAC,KAAKN,IAAvC,CAAP;AACD,CAFD;;AAIA,MAAMQ,SAAS,GAAG,CAAChB,KAAU,GAAGF,YAAd,EAA4BmB,MAA5B,KAAiD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EACL,GAAGlB,KADE;AAELD,QAAAA,QAAQ,EAAEO,OAAO,CAACN,KAAK,CAACD,QAAP,EAAiBkB,MAAM,CAACE,OAAxB;AAFZ,OAAP;;AAIF,SAAK,aAAL;AACE,aAAO,EACL,GAAGnB,KADE;AAELD,QAAAA,QAAQ,EAAEa,UAAU,CAACZ,KAAK,CAACD,QAAP,EAAiBkB,MAAM,CAACE,OAAxB;AAFf,OAAP;;AAIF;AACE,aAAOnB,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAegB,SAAf","sourcesContent":["type Act = {\r\n  type: string;\r\n  payload: string;\r\n};\r\n\r\nconst initialState = {\r\n  teamList: [\r\n    {\r\n      state: '',\r\n      point: 0,\r\n      score: 0,\r\n      times: 0,\r\n      ratio: 0,\r\n      count: 0,\r\n    },\r\n  ],\r\n};\r\n\r\nconst addTeam = (array: any, team: any) => {\r\n  return Array.from(new Set([...array, team]));\r\n}; //重複データが入らないようにするための対応\r\n\r\nconst removeTeam = (array: any, team: any) => {\r\n  return array.filter((v: any, i: any) => v !== team);\r\n};\r\n\r\nconst entryTeam = (state: any = initialState, action: Act): any => {\r\n  switch (action.type) {\r\n    case 'ADD_Team':\r\n      return {\r\n        ...state,\r\n        teamList: addTeam(state.teamList, action.payload),\r\n      };\r\n    case 'REMOVE_Team':\r\n      return {\r\n        ...state,\r\n        teamList: removeTeam(state.teamList, action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default entryTeam;\r\n"]},"metadata":{},"sourceType":"module"}